[build-system]
requires = ["setuptools"]
build-backend = "setuptools.build_meta"

[project]
name = "techiaith-mimic"
version = "2025.3.15-dev"
requires-python = "== 3.10.*"
keywords = ["LLM", "MT", "translation", "inference", "training"]
description = "A aibrary and CLI for performing experiments with LLMs."
classifiers = [
  "Programming Language :: Python :: 3.10",
  "Topic :: Text Processing :: Linguistic",
  "Topic :: Software Development :: Pre-processors",
  "Topic :: Software Development :: Localization",
  "Intended Audience :: Developers",
  "Intended Audience :: Science/Research",
  "License :: OSI Approved :: MIT License",
  "Operating System :: OS Independent",
]
dependencies = [
  "anthropic>=0.46",
  "autotrain-advanced>=0.8",
  "datachain>=0.7",
  "datasets>=3.2",
  "dvclive>=3.48",
  "gradio>=5.13",
  "jsonlines>=4.0",
  "langcodes>=3.5",
  "lm-eval[api,hf-transfer,multilingual,zeno]==0.4.8",
  "ninja>=1.11.1.2",
  "openai>=1.64",
  "openevals>=0.0.7",
  "polars>=1.17.1",
  "pydantic>=2.10.4",
  "srsly==2.5.0",
  "triton==3.1.0",
  "typer>=0.15",
  "unsloth==2024.12.4",
]

[tool.setuptools.package-data]
"techiaith.mimic" = ["*.md", "*.jsonl"]

[[project.authors]]
name = "Matt Russell"
email = "m.russell@bangor.ac.uk"

[project.license]
text = "MIT"

[project.readme]
file = "README.md"
content-type = "text/markdown"

[project.optional-dependencies]
dev = [
  "black>=23.0,<24.0",
  "isort>=5.13.2,<5.14",
  "ruff",
  "pytest",
  "mypy>=1.0,<1.11",
  "packaging>=23.0",
  "twine>=1.11.0",
  "setuptools",
  "toml>=0.10.2",
  "wheel",
]
test = ["pytest-cov", "pytest"]

[project.scripts]
mimic = "techiaith.mimic.cli:app"
lm-eval = "lm_eval.__main__:cli_evaluate"

[tool.setuptools]
license-files = ["LICENSE"]

[tool.mypy]
mypy_path = "src"
python_version = "3.10"
warn_unused_configs = true
allow_redefinition = false
explicit_package_bases = true
ignore_missing_imports = true
implicit_reexport = false
namespace_packages = true
no_implicit_optional = true
plugins = ["pydantic.mypy"]

[tool.pytest.ini_options]
filterwarnings = [
  "ignore:.*imp module.*deprecated",
  "ignore:.*invalid escape sequence:DeprecationWarning",
  "ignore:.*declare_namespace.*ruamel:DeprecationWarning",
]

[tool.coverage.run]
branch = true
parallel = true

[tool.coverage.report]
exclude_lines = ["no cov", "if __name__ == .__main__.:", "if TYPE_CHECKING:"]

[tool.setuptools.packages.find]
where = ["src"]
